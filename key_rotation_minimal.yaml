AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Key Rotation Solution with API Gateway Integration'

Parameters:
  SenderEmail:
    Type: String
    Description: 'Email address to send notifications from'

Resources:
  KeyRotationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt KeyRotationRole.Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          SENDER_EMAIL: !Ref SenderEmail
      Code:
        ZipFile: |
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Hello World'
              }

  KeyRotationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KeyRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListUsers
                  - iam:ListAccessKeys
                  - iam:CreateAccessKey
                  - iam:UpdateAccessKey
                  - iam:DeleteAccessKey
                  - iam:GetUser
                  - iam:ListUserTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:CreateSecret
                  - secretsmanager:UpdateSecret
                  - secretsmanager:ListSecrets
                Resource: '*'
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  KeyRotationApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: KeyRotationApi
      Description: API for IAM key rotation

  KeyRotationApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref KeyRotationApi
      ParentId: !GetAtt KeyRotationApi.RootResourceId
      PathPart: status

  KeyRotationApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref KeyRotationApi
      ResourceId: !Ref KeyRotationApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${KeyRotationFunction.Arn}/invocations

  KeyRotationApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: KeyRotationApiMethod
    Properties:
      RestApiId: !Ref KeyRotationApi

  KeyRotationApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref KeyRotationApi
      DeploymentId: !Ref KeyRotationApiDeployment
      StageName: prod

  KeyRotationApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref KeyRotationFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${KeyRotationApi}/*/GET/status

Outputs:
  KeyRotationFunctionArn:
    Description: Key Rotation Lambda Function ARN
    Value: !GetAtt KeyRotationFunction.Arn
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${KeyRotationApi}.execute-api.${AWS::Region}.amazonaws.com/prod/status 