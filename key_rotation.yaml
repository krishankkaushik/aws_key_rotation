AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Key Rotation with 10-minute rotation period'

Parameters:
  SenderEmail:
    Type: String
    Description: 'Sender email address for notifications'
  
  AdminEmail:
    Type: String
    Description: 'Admin email address for notifications'
  
  RotationPeriod:
    Type: Number
    Default: 10
    Description: 'Number of minutes after which a key should be rotated'
  
  DeactivationPeriod:
    Type: Number
    Default: 2
    Description: 'Number of minutes after which old key should be deactivated'
  
  DeletionPeriod:
    Type: Number
    Default: 2
    Description: 'Number of minutes after which deactivated key should be deleted'

Resources:
  KeyRotationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KeyRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateAccessKey
                  - iam:DeleteAccessKey
                  - iam:ListAccessKeys
                  - iam:UpdateAccessKey
                  - iam:GetUser
                  - iam:ListUserTags
                  - iam:ListUsers
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:CreateSecret
                Resource: '*'
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: '*'

  KeyRotationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt KeyRotationRole.Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          SENDER_EMAIL: !Ref SenderEmail
          ADMIN_EMAIL: !Ref AdminEmail
          ROTATION_PERIOD: !Ref RotationPeriod
          DEACTIVATION_PERIOD: !Ref DeactivationPeriod
          DELETION_PERIOD: !Ref DeletionPeriod
      Code:
        ZipFile: |
          import boto3
          import json
          import datetime
          import os
          import logging
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def get_user_email(username):
              """Get user's email from IAM tags or return admin email"""
              iam = boto3.client('iam')
              try:
                  response = iam.list_user_tags(UserName=username)
                  for tag in response.get('Tags', []):
                      if tag['Key'].lower() == 'email':
                          return tag['Value']
                  
                  user = iam.get_user(UserName=username)
                  if 'Email' in user['User']:
                      return user['User']['Email']
              except Exception as e:
                  logger.error(f"Error getting email for {username}: {str(e)}")
              
              return os.environ['ADMIN_EMAIL']
          
          def send_notification_email(username, key_status, new_key=None, old_key=None):
              """Send notification email with detailed information"""
              try:
                  ses = boto3.client('ses')
                  sender = os.environ['SENDER_EMAIL']
                  user_email = get_user_email(username)
                  
                  subject = f'AWS IAM Key Rotation Notification - {key_status}'
                  
                  # Get API endpoint from Secrets Manager
                  secrets = boto3.client('secretsmanager')
                  api_endpoint = json.loads(secrets.get_secret_value(SecretId='api-endpoint')['SecretString'])['endpoint']
                  api_key = json.loads(secrets.get_secret_value(SecretId='api-key')['SecretString'])['key']
                  
                  if key_status == 'New Key Created':
                      body = f"""Hello,

Your AWS credentials have been set up successfully.

You can use these credentials to access AWS services. The credentials are also stored in AWS Secrets Manager.

To access your credentials programmatically, you can use the following API endpoint:
{api_endpoint}

Your API Key: {api_key}

Example API calls:

1. Get your credentials:
curl -H "X-API-Key: {api_key}" {api_endpoint}/credentials/{username}

2. Create new credentials (if needed):
curl -X POST -H "X-API-Key: {api_key}" {api_endpoint}/credentials/{username}

3. Export all credentials:
curl -X POST -H "X-API-Key: {api_key}" {api_endpoint}/export-credentials

Important Security Notes:
1. Keep these credentials secure and never share them
2. The system will automatically rotate your keys every 10 minutes
3. You will receive email notifications for key rotation events
4. Old keys will be automatically deactivated after 12 minutes
5. Deactivated keys will be deleted after 14 minutes

If you have any questions, please contact your system administrator.

Best regards,
AWS Key Rotation System"""
                  elif key_status == 'Key Deactivated':
                      body = f"""Hello,

Your AWS IAM access key has been deactivated.

User: {username}
Status: {key_status}
Time: {datetime.datetime.now().isoformat()}

The key will be automatically deleted in 2 minutes.

To access your current credentials, use the API:
curl -H "X-API-Key: {api_key}" {api_endpoint}/credentials/{username}

Best regards,
AWS Key Rotation System"""
                  elif key_status == 'Key Deleted':
                      body = f"""Hello,

Your AWS IAM access key has been deleted.

User: {username}
Status: {key_status}
Time: {datetime.datetime.now().isoformat()}

To access your current credentials, use the API:
curl -H "X-API-Key: {api_key}" {api_endpoint}/credentials/{username}

Best regards,
AWS Key Rotation System"""
                  
                  response = ses.send_email(
                      Source=sender,
                      Destination={'ToAddresses': [user_email]},
                      Message={
                          'Subject': {'Data': subject},
                          'Body': {'Text': {'Data': body}}
                      }
                  )
                  logger.info(f"Email sent to {user_email}")
              except Exception as e:
                  logger.error(f"Error sending email: {str(e)}")
          
          def store_credentials(secrets_client, username, credentials):
              """Store credentials in Secrets Manager"""
              try:
                  secret_value = {
                      'AccessKeyId': credentials['AccessKeyId'],
                      'SecretAccessKey': credentials['SecretAccessKey'],
                      'CreatedDate': datetime.datetime.now().isoformat()
                  }
                  
                  try:
                      secrets_client.create_secret(
                          Name=username,
                          SecretString=json.dumps(secret_value),
                          Description=f'AWS credentials for {username}'
                      )
                  except secrets_client.exceptions.ResourceExistsException:
                      secrets_client.put_secret_value(
                          SecretId=username,
                          SecretString=json.dumps(secret_value)
                      )
                  
                  logger.info(f"Stored credentials in Secrets Manager for: {username}")
              except Exception as e:
                  logger.error(f"Error storing credentials: {str(e)}")
                  raise
          
          def rotate_key(username):
              """Rotate IAM access key"""
              try:
                  iam = boto3.client('iam')
                  secrets = boto3.client('secretsmanager')
                  
                  # List existing keys
                  response = iam.list_access_keys(UserName=username)
                  keys = response['AccessKeyMetadata']
                  
                  # Create new key
                  new_key = iam.create_access_key(UserName=username)
                  logger.info(f"Created new key for {username}")
                  
                  # Store new key in Secrets Manager
                  store_credentials(secrets, username, new_key['AccessKey'])
                  
                  # Send notification
                  send_notification_email(username, 'New Key Created', new_key=new_key['AccessKey'])
                  
                  # Deactivate old keys after buffer period
                  for key in keys:
                      if key['Status'] == 'Active':
                          iam.update_access_key(
                              UserName=username,
                              AccessKeyId=key['AccessKeyId'],
                              Status='Inactive'
                          )
                          send_notification_email(username, 'Key Deactivated')
                          
                          # Delete old key after grace period
                          iam.delete_access_key(
                              UserName=username,
                              AccessKeyId=key['AccessKeyId']
                          )
                          send_notification_email(username, 'Key Deleted')
                  
                  return True
              except Exception as e:
                  logger.error(f"Error rotating key for {username}: {str(e)}")
                  return False

          def get_credentials(username=None):
              """Get credentials from Secrets Manager"""
              try:
                  secrets = boto3.client('secretsmanager')
                  if username:
                      # Get credentials for specific user
                      response = secrets.get_secret_value(SecretId=username)
                      return json.loads(response['SecretString'])
                  else:
                      # Get credentials for all users
                      iam = boto3.client('iam')
                      users = iam.list_users()['Users']
                      credentials = {}
                      for user in users:
                          try:
                              response = secrets.get_secret_value(SecretId=user['UserName'])
                              credentials[user['UserName']] = json.loads(response['SecretString'])
                          except:
                              continue
                      return credentials
              except Exception as e:
                  logger.error(f"Error getting credentials: {str(e)}")
                  raise
          
          def lambda_handler(event, context):
              """Lambda handler for key rotation and API requests"""
              try:
                  logger.info("Lambda function started")
                  logger.info(f"Event: {json.dumps(event)}")
                  
                  # Check if this is an API Gateway request
                  if 'pathParameters' in event:
                      logger.info("Processing API request")
                      username = event.get('pathParameters', {}).get('username')
                      credentials = get_credentials(username)
                      return {
                          'statusCode': 200,
                          'body': json.dumps(credentials)
                      }
                  
                  # Regular key rotation event
                  logger.info("Starting key rotation process")
                  iam = boto3.client('iam')
                  response = iam.list_users()
                  logger.info(f"Found {len(response['Users'])} users")
                  
                  for user in response['Users']:
                      username = user['UserName']
                      logger.info(f"Processing user: {username}")
                      
                      # Skip AWS service accounts
                      if username.startswith('AWS-'):
                          logger.info(f"Skipping AWS service account: {username}")
                          continue
                      
                      # List access keys
                      keys = iam.list_access_keys(UserName=username)
                      logger.info(f"Found {len(keys['AccessKeyMetadata'])} keys for {username}")
                      
                      # Create new key for each user
                      logger.info(f"Creating new key for {username}")
                      rotate_key(username)
                  
                  logger.info("Key rotation completed")
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Key rotation completed')
                  }
              except Exception as e:
                  logger.error(f"Error in lambda handler: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }

  KeyRotationRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Trigger key rotation every 10 minutes'
      ScheduleExpression: 'rate(10 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt KeyRotationFunction.Arn
          Id: KeyRotationFunction

  InitialRotationRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Trigger initial key rotation'
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - AWS CloudFormation Stack Status Change
        detail:
          stack-name:
            - !Ref AWS::StackName
          status-details:
            status:
              - CREATE_COMPLETE
              - UPDATE_COMPLETE
      State: ENABLED
      Targets:
        - Arn: !GetAtt KeyRotationFunction.Arn
          Id: InitialRotationFunction

  KeyRotationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref KeyRotationFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt KeyRotationRule.Arn

  InitialRotationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref KeyRotationFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt InitialRotationRule.Arn

  KeyRotationApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: KeyRotationAPI
      Description: API for AWS IAM key rotation

  KeyRotationApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref KeyRotationApi
      ParentId: !GetAtt KeyRotationApi.RootResourceId
      PathPart: credentials

  KeyRotationApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref KeyRotationApi
      ResourceId: !Ref KeyRotationApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${KeyRotationFunction.Arn}/invocations

  KeyRotationApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: KeyRotationApiMethod
    Properties:
      RestApiId: !Ref KeyRotationApi

  KeyRotationApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref KeyRotationApi
      DeploymentId: !Ref KeyRotationApiDeployment
      StageName: prod

  KeyRotationApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref KeyRotationFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${KeyRotationApi}/*/*/*

Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt KeyRotationFunction.Arn
    Export:
      Name: KeyRotationLambdaArn

  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${KeyRotationApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: KeyRotationApiEndpoint 