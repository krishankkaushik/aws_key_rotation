AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Key Rotation Solution with API Gateway Integration'

Parameters:
  SenderEmail:
    Type: String
    Description: 'Email address to send notifications from'
  RotationPeriod:
    Type: Number
    Default: 10
    Description: 'Time in minutes between key rotations'
  InactivePeriod:
    Type: Number
    Default: 12
    Description: 'Time in minutes before deactivating old keys'
  DeletionPeriod:
    Type: Number
    Default: 15
    Description: 'Time in minutes before deleting old keys'

Resources:
  KeyRotationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt KeyRotationRole.Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          SENDER_EMAIL: !Ref SenderEmail
          ROTATION_PERIOD: !Ref RotationPeriod
          INACTIVE_PERIOD: !Ref InactivePeriod
          DELETION_PERIOD: !Ref DeletionPeriod
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          from datetime import datetime, timezone
          
          # Set up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          # Initialize AWS clients
          iam = boto3.client('iam')
          ses = boto3.client('ses')
          secrets = boto3.client('secretsmanager')
          
          def send_email(to_email, subject, body):
              try:
                  # Get API details from Secrets Manager
                  api_key_secret = json.loads(secrets.get_secret_value(SecretId='key-rotation-api-key')['SecretString'])
                  api_key = api_key_secret['api_key']
                  
                  # Get API endpoint from CloudFormation stack
                  cf = boto3.client('cloudformation')
                  stack = cf.describe_stacks(StackName='iam-key-rotation')
                  api_endpoint = None
                  for output in stack['Stacks'][0]['Outputs']:
                      if output['OutputKey'] == 'ApiEndpoint':
                          api_endpoint = output['OutputValue']
                          break
                  
                  if subject == 'AWS IAM Access Key Created':
                      body = f"""Hello,

Your AWS credentials have been set up successfully.

You can use these credentials to access AWS services. The credentials are also stored in AWS Secrets Manager.

To access your credentials programmatically, you can use the following API endpoint:
{api_endpoint}

Your API Key: {api_key}

Example API calls:

1. Get your credentials:
curl -H "X-API-Key: {api_key}" {api_endpoint}/credentials/{body.split(': ')[-1]}

2. Create new credentials (if needed):
curl -X POST -H "X-API-Key: {api_key}" {api_endpoint}/credentials/{body.split(': ')[-1]}

3. Export all credentials:
curl -X POST -H "X-API-Key: {api_key}" {api_endpoint}/export-credentials

Important Security Notes:
1. Keep these credentials secure and never share them
2. The system will automatically rotate your keys every 10 minutes
3. You will receive email notifications for key rotation events
4. Old keys will be automatically deactivated after 12 minutes
5. Deactivated keys will be deleted after 15 minutes

If you have any questions, please contact your system administrator.

Best regards,
AWS Key Rotation System"""
                  elif subject == 'AWS IAM Access Key Rotation':
                      body = f"""Hello,

Your IAM access key has been rotated.

New key: {body.split(': ')[-1]}

You can access your new credentials using the API endpoint:
{api_endpoint}

Your API Key: {api_key}

Example API calls:

1. Get your credentials:
curl -H "X-API-Key: {api_key}" {api_endpoint}/credentials/{body.split(': ')[-1]}

2. Create new credentials (if needed):
curl -X POST -H "X-API-Key: {api_key}" {api_endpoint}/credentials/{body.split(': ')[-1]}

3. Export all credentials:
curl -X POST -H "X-API-Key: {api_key}" {api_endpoint}/export-credentials

Important Security Notes:
1. Keep these credentials secure and never share them
2. The system will automatically rotate your keys every 10 minutes
3. You will receive email notifications for key rotation events
4. Old keys will be automatically deactivated after 12 minutes
5. Deactivated keys will be deleted after 15 minutes

If you have any questions, please contact your system administrator.

Best regards,
AWS Key Rotation System"""
                  elif subject == 'AWS IAM Access Key Deactivated':
                      body = f"""Hello,

Your old IAM access key has been deactivated.

Key ID: {body.split(': ')[-1]}

Important Security Notes:
1. The deactivated key will be deleted in 3 minutes
2. Please ensure you are using your new active key

Best regards,
AWS Key Rotation System"""
                  elif subject == 'AWS IAM Access Key Deleted':
                      body = f"""Hello,

Your old IAM access key has been deleted.

Important Security Notes:
1. Please ensure you are using your new active key
2. If you need to create new credentials, use the API endpoint:
{api_endpoint}

Your API Key: {api_key}

Best regards,
AWS Key Rotation System"""

                  response = ses.send_email(
                      Source=os.environ['SENDER_EMAIL'],
                      Destination={'ToAddresses': [to_email]},
                      Message={
                          'Subject': {'Data': subject},
                          'Body': {'Text': {'Data': body}}
                      }
                  )
                  logger.info(f"Email sent successfully: {response['MessageId']}")
              except Exception as e:
                  logger.error(f"Failed to send email: {str(e)}")
          
          def get_user_email(username):
              try:
                  response = iam.get_user(UserName=username)
                  return response['User'].get('Email', os.environ['SENDER_EMAIL'])
              except Exception as e:
                  logger.error(f"Failed to get user email: {str(e)}")
                  return os.environ['SENDER_EMAIL']
          
          def handler(event, context):
              try:
                  # Check if this is an API Gateway event
                  if 'httpMethod' in event:
                      return handle_api_request(event)
                  
                  # This is a scheduled rotation event
                  return handle_rotation_event()
              except Exception as e:
                  logger.error(f"Error in handler: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }
          
          def handle_api_request(event):
              try:
                  http_method = event['httpMethod']
                  path = event['path']
                  
                  if http_method == 'GET' and path == '/status':
                      return {
                          'statusCode': 200,
                          'body': json.dumps({'status': 'healthy'})
                      }
                  
                  # Extract username from path
                  username = path.split('/')[-1]
                  
                  if http_method == 'GET':
                      # Get current credentials
                      secret_id = f'iam-credentials-{username}'
                      try:
                          secret = secrets.get_secret_value(SecretId=secret_id)
                          return {
                              'statusCode': 200,
                              'body': secret['SecretString']
                          }
                      except secrets.exceptions.ResourceNotFoundException:
                          return {
                              'statusCode': 404,
                              'body': json.dumps({'error': 'Credentials not found'})
                          }
                  
                  elif http_method == 'POST':
                      if path == '/export-credentials':
                          # Export all credentials
                          all_credentials = {}
                          paginator = secrets.get_paginator('list_secrets')
                          for page in paginator.paginate():
                              for secret in page['SecretList']:
                                  if secret['Name'].startswith('iam-credentials-'):
                                      username = secret['Name'].replace('iam-credentials-', '')
                                      try:
                                          secret_value = secrets.get_secret_value(SecretId=secret['Name'])
                                          all_credentials[username] = json.loads(secret_value['SecretString'])
                                      except Exception as e:
                                          logger.error(f"Error getting secret {secret['Name']}: {str(e)}")
                          
                          return {
                              'statusCode': 200,
                              'body': json.dumps(all_credentials)
                          }
                      
                      # Create new credentials
                      try:
                          # Create new access key
                          response = iam.create_access_key(UserName=username)
                          new_key = response['AccessKey']
                          
                          # Store in Secrets Manager
                          secret_id = f'iam-credentials-{username}'
                          secret_value = json.dumps({
                              'AccessKeyId': new_key['AccessKeyId'],
                              'SecretAccessKey': new_key['SecretAccessKey'],
                              'CreatedAt': datetime.now(timezone.utc).isoformat()
                          })
                          
                          try:
                              secrets.create_secret(
                                  Name=secret_id,
                                  SecretString=secret_value
                              )
                          except secrets.exceptions.ResourceExistsException:
                              secrets.update_secret(
                                  SecretId=secret_id,
                                  SecretString=secret_value
                              )
                          
                          # Send email notification
                          to_email = get_user_email(username)
                          send_email(
                              to_email,
                              'AWS IAM Access Key Created',
                              f'New access key created for user {username}: {new_key["AccessKeyId"]}'
                          )
                          
                          return {
                              'statusCode': 200,
                              'body': json.dumps({
                                  'message': 'New credentials created successfully',
                                  'accessKeyId': new_key['AccessKeyId']
                              })
                          }
                      except Exception as e:
                          logger.error(f"Error creating credentials: {str(e)}")
                          return {
                              'statusCode': 500,
                              'body': json.dumps({'error': str(e)})
                          }
                  
                  return {
                      'statusCode': 400,
                      'body': json.dumps({'error': 'Invalid request'})
                  }
              except Exception as e:
                  logger.error(f"Error handling API request: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }
          
          def handle_rotation_event():
              try:
                  paginator = iam.get_paginator('list_users')
                  for page in paginator.paginate():
                      for user in page['Users']:
                          username = user['UserName']
                          
                          if is_user_exempt(username):
                              continue
                          
                          try:
                              keys = iam.list_access_keys(UserName=username)['AccessKeyMetadata']
                              
                              for key in keys:
                                  key_id = key['AccessKeyId']
                                  created_date = key['CreateDate']
                                  status = key['Status']
                                  
                                  now = datetime.now(timezone.utc)
                                  time_since_creation = (now - created_date).total_seconds() / 60
                                  
                                  logger.info(f"Processing user {username}, key {key_id}")
                                  logger.info(f"Time since creation: {time_since_creation} minutes")
                                  
                                  if status == 'Active' and time_since_creation >= float(os.environ['ROTATION_PERIOD']):
                                      rotate_key(username, key_id)
                                  elif status == 'Active' and time_since_creation >= float(os.environ['INACTIVE_PERIOD']):
                                      deactivate_key(username, key_id)
                                  elif status == 'Inactive' and time_since_creation >= float(os.environ['DELETION_PERIOD']):
                                      delete_key(username, key_id)
                          except Exception as e:
                              logger.error(f"Error processing user {username}: {str(e)}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({'message': 'Rotation completed successfully'})
                  }
              except Exception as e:
                  logger.error(f"Error in rotation event: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }
          
          def is_user_exempt(username):
              try:
                  response = iam.list_user_tags(UserName=username)
                  for tag in response['Tags']:
                      if tag['Key'] == 'KeyRotationExempt' and tag['Value'].lower() == 'true':
                          return True
                  return False
              except Exception as e:
                  logger.error(f"Error checking user exemption: {str(e)}")
                  return False
          
          def rotate_key(username, old_key_id):
              try:
                  response = iam.create_access_key(UserName=username)
                  new_key = response['AccessKey']
                  
                  secret_id = f'iam-credentials-{username}'
                  secret_value = json.dumps({
                      'AccessKeyId': new_key['AccessKeyId'],
                      'SecretAccessKey': new_key['SecretAccessKey'],
                      'CreatedAt': datetime.now(timezone.utc).isoformat()
                  })
                  
                  try:
                      secrets.create_secret(
                          Name=secret_id,
                          SecretString=secret_value
                      )
                  except secrets.exceptions.ResourceExistsException:
                      secrets.update_secret(
                          SecretId=secret_id,
                          SecretString=secret_value
                      )
                  
                  to_email = get_user_email(username)
                  send_email(
                      to_email,
                      'AWS IAM Access Key Rotation',
                      f'New access key created for user {username}: {new_key["AccessKeyId"]}'
                  )
                  
                  logger.info(f"Rotated key for user {username}")
              except Exception as e:
                  logger.error(f"Error rotating key: {str(e)}")
          
          def deactivate_key(username, key_id):
              try:
                  iam.update_access_key(
                      UserName=username,
                      AccessKeyId=key_id,
                      Status='Inactive'
                  )
                  
                  to_email = get_user_email(username)
                  send_email(
                      to_email,
                      'AWS IAM Access Key Deactivated',
                      f'Access key deactivated for user {username}: {key_id}'
                  )
                  
                  logger.info(f"Deactivated key {key_id} for user {username}")
              except Exception as e:
                  logger.error(f"Error deactivating key: {str(e)}")
          
          def delete_key(username, key_id):
              try:
                  iam.delete_access_key(
                      UserName=username,
                      AccessKeyId=key_id
                  )
                  
                  to_email = get_user_email(username)
                  send_email(
                      to_email,
                      'AWS IAM Access Key Deleted',
                      f'Access key deleted for user {username}: {key_id}'
                  )
                  
                  logger.info(f"Deleted key {key_id} for user {username}")
              except Exception as e:
                  logger.error(f"Error deleting key: {str(e)}")

  KeyRotationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KeyRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListUsers
                  - iam:ListAccessKeys
                  - iam:CreateAccessKey
                  - iam:UpdateAccessKey
                  - iam:DeleteAccessKey
                  - iam:GetUser
                  - iam:ListUserTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:CreateSecret
                  - secretsmanager:UpdateSecret
                  - secretsmanager:ListSecrets
                Resource: '*'
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  KeyRotationApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: KeyRotationApi
      Description: API for IAM key rotation

  KeyRotationApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref KeyRotationApi
      ParentId: !GetAtt KeyRotationApi.RootResourceId
      PathPart: status

  KeyRotationApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref KeyRotationApi
      ResourceId: !Ref KeyRotationApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${KeyRotationFunction.Arn}/invocations

  KeyRotationApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: KeyRotationApiMethod
    Properties:
      RestApiId: !Ref KeyRotationApi

  KeyRotationApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref KeyRotationApi
      DeploymentId: !Ref KeyRotationApiDeployment
      StageName: prod

  KeyRotationApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref KeyRotationFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${KeyRotationApi}/*/GET/status

Outputs:
  KeyRotationFunctionArn:
    Description: Key Rotation Lambda Function ARN
    Value: !GetAtt KeyRotationFunction.Arn
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${KeyRotationApi}.execute-api.${AWS::Region}.amazonaws.com/prod/status 