AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Key Rotation with 10-minute rotation period'

Parameters:
  SenderEmail:
    Type: String
    Description: 'Sender email address for notifications'
  
  AdminEmail:
    Type: String
    Description: 'Admin email address for notifications'

Resources:
  KeyRotationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KeyRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateAccessKey
                  - iam:DeleteAccessKey
                  - iam:ListAccessKeys
                  - iam:UpdateAccessKey
                  - iam:GetUser
                  - iam:ListUserTags
                  - iam:ListUsers
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:CreateSecret
                  - secretsmanager:UpdateSecret
                  - secretsmanager:DeleteSecret
                  - secretsmanager:TagResource
                  - secretsmanager:UntagResource
                  - secretsmanager:ListSecrets
                Resource: 
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  KeyRotationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-key-rotation
      Handler: index.lambda_handler
      Role: !GetAtt KeyRotationRole.Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          SENDER_EMAIL: !Ref SenderEmail
          ADMIN_EMAIL: !Ref AdminEmail
          JWT_SECRET_ARN: !Ref JwtSecret
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import time
          import os
          from datetime import datetime, timezone, timedelta
          from botocore.exceptions import ClientError
          
          # PyJWT implementation
          import base64
          import hmac
          import hashlib
          import time
          
          def jwt_encode(payload, secret, algorithm='HS256'):
              header = {'typ': 'JWT', 'alg': algorithm}
              segments = []
              
              # Encode header
              header_bytes = json.dumps(header).encode('utf-8')
              header_b64 = base64.urlsafe_b64encode(header_bytes).decode('utf-8').rstrip('=')
              segments.append(header_b64)
              
              # Encode payload
              payload_bytes = json.dumps(payload).encode('utf-8')
              payload_b64 = base64.urlsafe_b64encode(payload_bytes).decode('utf-8').rstrip('=')
              segments.append(payload_b64)
              
              # Create signature
              msg = f"{header_b64}.{payload_b64}".encode('utf-8')
              signature = hmac.new(secret.encode('utf-8'), msg, hashlib.sha256).digest()
              signature_b64 = base64.urlsafe_b64encode(signature).decode('utf-8').rstrip('=')
              segments.append(signature_b64)
              
              return '.'.join(segments)
          
          def jwt_decode(token, secret, algorithms=['HS256']):
              try:
                  # Split token
                  parts = token.split('.')
                  if len(parts) != 3:
                      raise ValueError('Invalid token format')
                  
                  # Decode header and payload
                  header_b64 = parts[0] + '=' * (-len(parts[0]) % 4)
                  payload_b64 = parts[1] + '=' * (-len(parts[1]) % 4)
                  
                  header = json.loads(base64.urlsafe_b64decode(header_b64).decode('utf-8'))
                  payload = json.loads(base64.urlsafe_b64decode(payload_b64).decode('utf-8'))
                  
                  # Verify signature
                  msg = f"{parts[0]}.{parts[1]}".encode('utf-8')
                  signature = hmac.new(secret.encode('utf-8'), msg, hashlib.sha256).digest()
                  signature_b64 = base64.urlsafe_b64encode(signature).decode('utf-8').rstrip('=')
                  
                  if signature_b64 != parts[2]:
                      raise ValueError('Invalid signature')
                  
                  # Check expiration
                  if 'exp' in payload and payload['exp'] < time.time():
                      raise ValueError('Token has expired')
                  
                  return payload
              except Exception as e:
                  raise ValueError(f'Invalid token: {str(e)}')
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def validate_token(token):
              try:
                  # Get JWT secret from Secrets Manager
                  secrets_client = boto3.client('secretsmanager')
                  secret = secrets_client.get_secret_value(SecretId=os.environ['JWT_SECRET_ARN'])
                  secret_dict = json.loads(secret['SecretString'])
                  secret_key = secret_dict['secret']
                  
                  # Validate token
                  payload = jwt_decode(token, secret_key)
                  return True, payload
              except Exception as e:
                  return False, str(e)
          
          def create_new_key(iam, secrets, username):
              """Create a new key for a user and store it in Secrets Manager"""
              try:
                  new_key = iam.create_access_key(UserName=username)
                  logger.info(f"Created new key for user {username}")
                  
                  # Store new key in Secrets Manager
                  secret_name = f"{username}-access-key"
                  secret_value = {
                      'AccessKeyId': new_key['AccessKey']['AccessKeyId'],
                      'SecretAccessKey': new_key['AccessKey']['SecretAccessKey'],
                      'CreateDate': datetime.now(timezone.utc).isoformat()
                  }
                  
                  try:
                      secrets.create_secret(
                          Name=secret_name,
                          SecretString=json.dumps(secret_value)
                      )
                      logger.info(f"Stored new key in Secrets Manager for user {username}")
                  except ClientError as e:
                      if e.response['Error']['Code'] == 'ResourceExistsException':
                          secrets.update_secret(
                              SecretId=secret_name,
                              SecretString=json.dumps(secret_value)
                          )
                          logger.info(f"Updated existing secret in Secrets Manager for user {username}")
                      else:
                          raise
                  
                  return new_key
              except Exception as e:
                  logger.error(f"Error creating new key for user {username}: {str(e)}")
                  return None
          
          def lambda_handler(event, context):
              # API/JWT logic untouched
              if 'path' in event or 'queryStringParameters' in event:
                  # Existing API/JWT logic
                  # ... existing code ...
                  pass
              else:
                  # --- Begin: Working Rotation Logic from key_rotation_copied ---
                  logger.info("Starting key rotation process (refactored logic)")
                  iam = boto3.client('iam')
                  secrets = boto3.client('secretsmanager')
                  users = iam.list_users()['Users']
                  logger.info(f"Found {len(users)} users to process")
                  current_time = datetime.now(timezone.utc)
                  for user in users:
                      username = user['UserName']
                      logger.info(f"Processing user: {username}")
                      existing_keys = iam.list_access_keys(UserName=username)['AccessKeyMetadata']
                      logger.info(f"Found {len(existing_keys)} existing keys for user {username}")
                      # Get active keys
                      active_keys = [k for k in existing_keys if k['Status'] == 'Active']
                      logger.info(f"Found {len(active_keys)} active keys for user {username}")
                      secret_id = f"{username}-access-key"
                      # Deactivate old keys (10 min)
                      for key in active_keys:
                          key_age = (current_time - key['CreateDate']).total_seconds() / 60
                          logger.info(f"Key {key['AccessKeyId']} age: {key_age} minutes")
                          if key_age >= 10:
                              logger.info(f"Deactivating key {key['AccessKeyId']} for user {username}")
                              iam.update_access_key(UserName=username, AccessKeyId=key['AccessKeyId'], Status='Inactive')
                      # Delete very old keys (13 min)
                      for key in existing_keys:
                          key_age = (current_time - key['CreateDate']).total_seconds() / 60
                          if key_age >= 13 and len(existing_keys) > 1:
                              logger.info(f"Deleting old key {key['AccessKeyId']} for user {username}")
                              iam.delete_access_key(UserName=username, AccessKeyId=key['AccessKeyId'])
                      # Create new key if needed (if <2 active keys)
                      active_keys = [k for k in iam.list_access_keys(UserName=username)['AccessKeyMetadata'] if k['Status'] == 'Active']
                      if len(active_keys) < 2:
                          logger.info(f"Creating new key for user {username}")
                          new_key = iam.create_access_key(UserName=username)['AccessKey']
                          # Store in Secrets Manager
                          secret_value = {
                              'AccessKeyId': new_key['AccessKeyId'],
                              'SecretAccessKey': new_key['SecretAccessKey'],
                              'CreateDate': new_key['CreateDate'].isoformat(),
                              'status': 'active'
                          }
                          try:
                              secrets.create_secret(
                                  Name=secret_id,
                                  SecretString=json.dumps(secret_value),
                                  Description=f'Credentials for user {username}'
                              )
                              logger.info(f"Created new secret for user {username}")
                          except secrets.exceptions.ResourceExistsException:
                              secrets.update_secret(
                                  SecretId=secret_id,
                                  SecretString=json.dumps(secret_value)
                              )
                              logger.info(f"Updated existing secret for user {username}")
                  logger.info("Key rotation completed successfully (refactored logic)")
                  return {
                      'statusCode': 200,
                      'body': json.dumps({'message': 'Key rotation completed successfully'})
                  }

  KeyRotationSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule for IAM key rotation every 10 minutes"
      ScheduleExpression: "rate(10 minutes)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt KeyRotationFunction.Arn
          Id: "KeyRotationTarget"

  KeyRotationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref KeyRotationFunction
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt KeyRotationSchedule.Arn

  InitialSetupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-initial-setup
      Handler: index.lambda_handler
      Role: !GetAtt KeyRotationRole.Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          SENDER_EMAIL: !Ref SenderEmail
          ADMIN_EMAIL: !Ref AdminEmail
          JWT_SECRET_ARN: !Ref JwtSecret
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          from datetime import datetime, timezone, timedelta
          from botocore.exceptions import ClientError
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              
              iam = boto3.client('iam')
              secrets = boto3.client('secretsmanager')
              
              # Get all IAM users
              users = iam.list_users()['Users']
              
              for user in users:
                  username = user['UserName']
                  
                  # Skip users that don't need rotation
                  if username.startswith('AWS-') or username == 'admin':
                      continue
                  
                  try:
                      logger.info(f"Processing user {username}")
                      
                      # Get current access keys
                      keys = iam.list_access_keys(UserName=username)['AccessKeyMetadata']
                      
                      # Delete any existing keys
                      for key in keys:
                          try:
                              iam.delete_access_key(UserName=username, AccessKeyId=key['AccessKeyId'])
                              logger.info(f"Deleted existing key {key['AccessKeyId']} for user {username}")
                          except Exception as e:
                              logger.error(f"Error deleting key {key['AccessKeyId']} for user {username}: {str(e)}")
                      
                      # Create new key
                      try:
                          new_key = iam.create_access_key(UserName=username)
                          logger.info(f"Created new key for user {username}")
                          
                          # Store new key in Secrets Manager
                          secret_name = f"{username}-access-key"
                          secret_value = {
                              'AccessKeyId': new_key['AccessKey']['AccessKeyId'],
                              'SecretAccessKey': new_key['AccessKey']['SecretAccessKey'],
                              'CreateDate': datetime.now(timezone.utc).isoformat()
                          }
                          
                          try:
                              secrets.create_secret(
                                  Name=secret_name,
                                  SecretString=json.dumps(secret_value)
                              )
                              logger.info(f"Stored new key in Secrets Manager for user {username}")
                          except ClientError as e:
                              if e.response['Error']['Code'] == 'ResourceExistsException':
                                  secrets.update_secret(
                                      SecretId=secret_name,
                                      SecretString=json.dumps(secret_value)
                                  )
                                  logger.info(f"Updated existing secret in Secrets Manager for user {username}")
                              else:
                                  raise
                      except Exception as e:
                          logger.error(f"Error creating new key for user {username}: {str(e)}")
                          continue
                  except Exception as e:
                      logger.error(f"Error processing user {username}: {str(e)}")
                      continue
              
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'Initial setup completed successfully'})
              }

  InitialSetupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref InitialSetupFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt InitialRotationRule.Arn

  InitialRotationRule:
    Type: AWS::Events::Rule
    Properties:
      Name: InitialRotationRule
      Description: 'Trigger initial key rotation'
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - AWS CloudFormation Stack Status Change
        detail:
          stack-name:
            - !Ref AWS::StackName
          status-details:
            status:
              - CREATE_COMPLETE
              - UPDATE_COMPLETE
      State: ENABLED
      Targets:
        - Arn: !GetAtt InitialSetupFunction.Arn
          Id: InitialSetupFunction

  KeyRotationApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: KeyRotationAPI
      Description: API for AWS IAM key rotation

  KeyRotationApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref KeyRotationApi
      ParentId: !GetAtt KeyRotationApi.RootResourceId
      PathPart: active-key

  KeyRotationApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref KeyRotationApi
      ResourceId: !Ref KeyRotationApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${KeyRotationFunction.Arn}/invocations
        RequestParameters:
          integration.request.querystring.username: method.request.querystring.username
      RequestParameters:
        method.request.querystring.username: true
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  KeyRotationApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: KeyRotationApiMethod
    Properties:
      RestApiId: !Ref KeyRotationApi

  KeyRotationApiStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: KeyRotationApiDeployment
    Properties:
      RestApiId: !Ref KeyRotationApi
      DeploymentId: !Ref KeyRotationApiDeployment
      StageName: prod

  KeyRotationApiPermission:
    Type: AWS::Lambda::Permission
    DependsOn: KeyRotationApiStage
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref KeyRotationFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${KeyRotationApi}/*/*/*

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: KeyRotationApiStage
    Properties:
      Name: !Sub ${AWS::StackName}-${AWS::Region}-api-key
      Description: API Key for accessing the key rotation API
      Enabled: true
      Value: !Sub ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: 
      - KeyRotationApiStage
      - ApiKey
    Properties:
      Description: Usage plan for key rotation API
      ApiStages:
        - ApiId: !Ref KeyRotationApi
          Stage: prod
      Throttle:
        RateLimit: 100
        BurstLimit: 200
      Quota:
        Limit: 1000
        Period: DAY

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn: UsagePlan
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  ApiEndpointSecret:
    Type: AWS::SecretsManager::Secret
    DependsOn: KeyRotationApiStage
    Properties:
      Name: !Sub ${AWS::StackName}-${AWS::Region}-api-endpoint
      Description: API endpoint URL
      SecretString: !Sub '{"endpoint": "https://${KeyRotationApi}.execute-api.${AWS::Region}.amazonaws.com/prod/active-key"}'

  JwtSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-jwt-secret
      Description: JWT secret key for token generation
      GenerateSecretString:
        SecretStringTemplate: '{"secret": "REPLACE_ME"}'
        GenerateStringKey: "secret"
        ExcludeCharacters: '"@/\'

  TokenGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-token-generator
      Handler: index.lambda_handler
      Role: !GetAtt KeyRotationRole.Arn
      Runtime: python3.9
      Timeout: 30
      Environment:
        Variables:
          JWT_SECRET_ARN: !Ref JwtSecret
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          from datetime import datetime, timedelta
          from botocore.exceptions import ClientError
          
          # PyJWT implementation
          import base64
          import hmac
          import hashlib
          import time
          
          def jwt_encode(payload, secret, algorithm='HS256'):
              header = {'typ': 'JWT', 'alg': algorithm}
              segments = []
              
              # Encode header
              header_bytes = json.dumps(header).encode('utf-8')
              header_b64 = base64.urlsafe_b64encode(header_bytes).decode('utf-8').rstrip('=')
              segments.append(header_b64)
              
              # Encode payload
              payload_bytes = json.dumps(payload).encode('utf-8')
              payload_b64 = base64.urlsafe_b64encode(payload_bytes).decode('utf-8').rstrip('=')
              segments.append(payload_b64)
              
              # Create signature
              msg = f"{header_b64}.{payload_b64}".encode('utf-8')
              signature = hmac.new(secret.encode('utf-8'), msg, hashlib.sha256).digest()
              signature_b64 = base64.urlsafe_b64encode(signature).decode('utf-8').rstrip('=')
              segments.append(signature_b64)
              
              return '.'.join(segments)
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              try:
                  logger.info(f"Received event: {json.dumps(event)}")
                  
                  # Get JWT secret from Secrets Manager
                  secrets = boto3.client('secretsmanager')
                  response = secrets.get_secret_value(SecretId=os.environ['JWT_SECRET_ARN'])
                  jwt_secret = json.loads(response['SecretString'])['secret']
                  
                  # Generate JWT token with 5-minute expiration
                  payload = {
                      'exp': int(time.time()) + 300,  # 5 minutes from now
                      'iat': int(time.time())
                  }
                  
                  token = jwt_encode(payload, jwt_secret)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'token': token
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Error generating token: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }

  TokenGeneratorApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref KeyRotationApi
      ParentId: !GetAtt KeyRotationApi.RootResourceId
      PathPart: generate-token

  TokenGeneratorApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref KeyRotationApi
      ResourceId: !Ref TokenGeneratorApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TokenGeneratorFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  TokenGeneratorApiPermission:
    Type: AWS::Lambda::Permission
    DependsOn: KeyRotationApiStage
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TokenGeneratorFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${KeyRotationApi}/*/*/*

Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt KeyRotationFunction.Arn
    Export:
      Name: KeyRotationLambdaArn

  EventRuleArn:
    Description: 'ARN of the EventBridge rule'
    Value: !GetAtt KeyRotationSchedule.Arn
    Export:
      Name: KeyRotationEventRuleArn

  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${KeyRotationApi}.execute-api.${AWS::Region}.amazonaws.com/prod/active-key'
    Export:
      Name: KeyRotationApiEndpoint

  ApiKey:
    Description: 'API Key for accessing the endpoint'
    Value: !Sub '${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'
    Export:
      Name: KeyRotationApiKey 