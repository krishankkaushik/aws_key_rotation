AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Key Rotation with 30-minute rotation period and monitoring'

Parameters:
  RotationPeriod:
    Type: Number
    Default: 0.5
    Description: 'Number of hours after which a key should be rotated (0.5 = 30 minutes)'
  
  InactivePeriod:
    Type: Number
    Default: 1
    Description: 'Number of hours after which to inactivate keys'
  
  InactiveBuffer:
    Type: Number
    Default: 0.5
    Description: 'Grace period between rotation and deactivation (30 minutes)'
  
  RecoveryGracePeriod:
    Type: Number
    Default: 0.5
    Description: 'Recovery grace period between deactivation and deletion (30 minutes)'
  
  AdminEmail:
    Type: String
    Description: 'Admin email address for notifications'
  
  SenderEmail:
    Type: String
    Description: 'Sender email address for notifications'

Resources:
  KeyRotationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KeyRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateAccessKey
                  - iam:DeleteAccessKey
                  - iam:ListAccessKeys
                  - iam:UpdateAccessKey
                  - iam:GetUser
                  - iam:ListUserTags
                  - iam:ListUsers
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:CreateSecret
                Resource: '*'
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  KeyRotationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt KeyRotationLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import datetime
          import os
          import logging
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def put_metric(user, status):
              """Send metrics to CloudWatch"""
              try:
                  cloudwatch = boto3.client('cloudwatch')
                  cloudwatch.put_metric_data(
                      Namespace='IAMKeyRotation',
                      MetricData=[
                          {
                              'MetricName': 'KeyRotationStatus',
                              'Value': 1,
                              'Unit': 'Count',
                              'Dimensions': [
                                  {'Name': 'User', 'Value': user},
                                  {'Name': 'Status', 'Value': status}
                              ]
                          }
                      ]
                  )
                  logger.info(f"Metric sent: {status} for user {user}")
              except Exception as e:
                  logger.error(f"Error sending metric: {str(e)}")
          
          def get_user_email(username):
              """Get user's email from IAM tags or return admin email"""
              iam = boto3.client('iam')
              try:
                  # First try to get email from user tags
                  response = iam.list_user_tags(UserName=username)
                  for tag in response.get('Tags', []):
                      if tag['Key'].lower() == 'email':
                          return tag['Value']
                  
                  # If no email tag, try to get from user attributes
                  user = iam.get_user(UserName=username)
                  if 'Email' in user['User']:
                      return user['User']['Email']
              except Exception as e:
                  logger.error(f"Error getting email for {username}: {str(e)}")
              
              # Return admin email as fallback
              return os.environ['ADMIN_EMAIL']
          
          def send_notification_email(username, key_status, new_key=None, old_key=None):
              """Send notification email with detailed information"""
              try:
                  ses = boto3.client('ses')
                  sender = os.environ['SENDER_EMAIL']
                  user_email = get_user_email(username)
                  admin_email = os.environ['ADMIN_EMAIL']
                  
                  subject = f'AWS IAM Key Rotation Notification - {key_status}'
                  
                  # Prepare email body based on the status
                  if key_status == 'New Key Created':
                      body = f"""
                      Hello,
                      
                      A new AWS IAM access key has been created for your account.
                      
                      User: {username}
                      Status: {key_status}
                      Time: {datetime.datetime.now().isoformat()}
                      
                      The new key has been stored in AWS Secrets Manager.
                      Secret Name: {username}
                      
                      Please update your applications with the new key.
                      
                      Best regards,
                      AWS IAM Key Rotation System
                      """
                  elif key_status == 'Key Deactivated':
                      body = f"""
                      Hello,
                      
                      Your AWS IAM access key has been deactivated.
                      
                      User: {username}
                      Status: {key_status}
                      Time: {datetime.datetime.now().isoformat()}
                      
                      The key will be deleted in {os.environ['RECOVERY_GRACE_PERIOD']} hours.
                      Please ensure you have updated all applications with the new key.
                      
                      Best regards,
                      AWS IAM Key Rotation System
                      """
                  elif key_status == 'Key Deleted':
                      body = f"""
                      Hello,
                      
                      Your AWS IAM access key has been deleted.
                      
                      User: {username}
                      Status: {key_status}
                      Time: {datetime.datetime.now().isoformat()}
                      
                      Please ensure you have updated all applications with the new key.
                      
                      Best regards,
                      AWS IAM Key Rotation System
                      """
                  
                  response = ses.send_email(
                      Source=sender,
                      Destination={
                          'ToAddresses': [user_email, admin_email]
                      },
                      Message={
                          'Subject': {
                              'Data': subject
                          },
                          'Body': {
                              'Text': {
                                  'Data': body
                              }
                          }
                      }
                  )
                  logger.info(f"Email sent successfully: {response['MessageId']}")
                  put_metric(username, 'EmailSent')
              except Exception as e:
                  logger.error(f"Error sending email: {str(e)}")
                  put_metric(username, 'EmailFailed')
          
          def store_key_in_secrets_manager(secretsmanager_client, username, key):
              """Store access key in Secrets Manager"""
              try:
                  secret_name = username  # Using username directly as secret name
                  secret_value = {
                      'AccessKeyId': key['AccessKeyId'],
                      'SecretAccessKey': key['SecretAccessKey'],
                      'CreatedDate': datetime.datetime.now().isoformat()
                  }
                  
                  # Check if secret exists
                  try:
                      secretsmanager_client.describe_secret(SecretId=secret_name)
                      # Update existing secret
                      secretsmanager_client.update_secret(
                          SecretId=secret_name,
                          SecretString=json.dumps(secret_value)
                      )
                      logger.info(f"Updated credentials in Secrets Manager for: {username}")
                  except secretsmanager_client.exceptions.ResourceNotFoundException:
                      # Create new secret
                      secretsmanager_client.create_secret(
                          Name=secret_name,
                          SecretString=json.dumps(secret_value),
                          Description=f'AWS credentials for {username}'
                      )
                      logger.info(f"Stored credentials in Secrets Manager for: {username}")
              except Exception as e:
                  logger.error(f"Error storing credentials for {username}: {str(e)}")
                  raise
          
          def rotate_keys_for_user(iam_client, secretsmanager_client, username):
              """Rotate keys for a specific user"""
              try:
                  # Get user's access keys
                  keys = iam_client.list_access_keys(UserName=username)['AccessKeyMetadata']
                  
                  # Sort keys by creation date (oldest first)
                  keys.sort(key=lambda x: x['CreateDate'])
                  
                  # Check if we need to rotate keys
                  for key in keys:
                      key_age = (datetime.datetime.now(datetime.timezone.utc) - key['CreateDate']).total_seconds() / 3600
                      
                      if key_age >= float(os.environ['ROTATION_PERIOD']):  # 30-minute rotation period
                          # If user has 2 active keys, deactivate the oldest one first
                          active_keys = [k for k in keys if k['Status'] == 'Active']
                          if len(active_keys) >= 2:
                              oldest_key = active_keys[0]
                              iam_client.update_access_key(
                                  UserName=username,
                                  AccessKeyId=oldest_key['AccessKeyId'],
                                  Status='Inactive'
                              )
                              logger.info(f"Deactivated key {oldest_key['AccessKeyId']} for user {username}")
                              put_metric(username, 'KeyDeactivated')
                              send_notification_email(
                                  username,
                                  'Key Deactivated',
                                  old_key=oldest_key
                              )
                          
                          # Create new key
                          new_key = iam_client.create_access_key(UserName=username)
                          logger.info(f"Created new key for user {username}")
                          put_metric(username, 'NewKeyCreated')
                          send_notification_email(
                              username,
                              'New Key Created',
                              new_key=new_key
                          )
                          
                          # Store new key in Secrets Manager
                          store_key_in_secrets_manager(secretsmanager_client, username, new_key)
                          
                          # If there are inactive keys older than the recovery grace period, delete them
                          inactive_keys = [k for k in keys if k['Status'] == 'Inactive']
                          for inactive_key in inactive_keys:
                              inactive_age = (datetime.datetime.now(datetime.timezone.utc) - inactive_key['CreateDate']).total_seconds() / 3600
                              if inactive_age >= float(os.environ['RECOVERY_GRACE_PERIOD']):
                                  iam_client.delete_access_key(
                                      UserName=username,
                                      AccessKeyId=inactive_key['AccessKeyId']
                                  )
                                  logger.info(f"Deleted key {inactive_key['AccessKeyId']} for user {username}")
                                  put_metric(username, 'KeyDeleted')
                                  send_notification_email(
                                      username,
                                      'Key Deleted',
                                      old_key=inactive_key
                                  )
              except Exception as e:
                  logger.error(f"Error rotating keys for user {username}: {str(e)}")
                  raise
          
          def lambda_handler(event, context):
              """Main Lambda handler"""
              try:
                  iam = boto3.client('iam')
                  secretsmanager = boto3.client('secretsmanager')
                  
                  # Get all IAM users
                  users = iam.list_users()['Users']
                  logger.info(f"Found {len(users)} IAM users")
                  
                  for user in users:
                      username = user['UserName']
                      if not username.startswith('test-user-'):
                          continue
                      
                      logger.info(f"Processing user: {username}")
                      rotate_keys_for_user(iam, secretsmanager, username)
                      
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Key rotation completed successfully')
                  }
              except Exception as e:
                  logger.error(f"Error in Lambda handler: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          ROTATION_PERIOD: !Ref RotationPeriod
          INACTIVE_PERIOD: !Ref InactivePeriod
          INACTIVE_BUFFER: !Ref InactiveBuffer
          RECOVERY_GRACE_PERIOD: !Ref RecoveryGracePeriod
          ADMIN_EMAIL: !Ref AdminEmail
          SENDER_EMAIL: !Ref SenderEmail

  KeyRotationEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Trigger key rotation every 5 minutes'
      ScheduleExpression: 'rate(5 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt KeyRotationLambda.Arn
          Id: 'KeyRotationLambda'

  KeyRotationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref KeyRotationLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt KeyRotationEventRule.Arn

  KeyRotationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: 'IAMKeyRotationDashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["IAMKeyRotation", "KeyRotationStatus", "Status", "NewKeyCreated"],
                  ["IAMKeyRotation", "KeyRotationStatus", "Status", "KeyDeactivated"],
                  ["IAMKeyRotation", "KeyRotationStatus", "Status", "KeyDeleted"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Key Rotation Status",
                "period": 300
              }
            },
            {
              "type": "metric",
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["IAMKeyRotation", "KeyRotationStatus", "Status", "EmailSent"],
                  ["IAMKeyRotation", "KeyRotationStatus", "Status", "EmailFailed"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Email Notifications",
                "period": 300
              }
            }
          ]
        }

Outputs:
  KeyRotationLambdaArn:
    Description: 'ARN of the Key Rotation Lambda function'
    Value: !GetAtt KeyRotationLambda.Arn
  
  DashboardUrl:
    Description: 'URL of the CloudWatch Dashboard'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=IAMKeyRotationDashboard' 
