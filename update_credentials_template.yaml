AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda function to update application credentials'

Resources:
  UpdateCredentialsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UpdateCredentialsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListUsers
                  - iam:ListUserTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'

  UpdateCredentialsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt UpdateCredentialsLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import configparser
          import logging
          from pathlib import Path
          from datetime import datetime
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def get_new_credentials(username):
              """Get new credentials from Secrets Manager"""
              secretsmanager = boto3.client('secretsmanager')
              try:
                  response = secretsmanager.get_secret_value(
                      SecretId=f'iam-key-{username}'
                  )
                  return json.loads(response['SecretString'])
              except Exception as e:
                  logger.error(f"Error getting credentials for {username}: {str(e)}")
                  return None
          
          def update_json_config(username, credentials):
              """Update credentials in JSON config file"""
              config_path = Path(f'/tmp/test-apps/app1/config.json')
              config_path.parent.mkdir(parents=True, exist_ok=True)
              
              try:
                  if config_path.exists():
                      with open(config_path, 'r') as f:
                          config = json.load(f)
                  else:
                      config = {
                          "aws": {
                              "access_key_id": "",
                              "secret_access_key": "",
                              "region": "us-east-1"
                          }
                      }
                  
                  config['aws']['access_key_id'] = credentials['AccessKeyId']
                  config['aws']['secret_access_key'] = credentials['SecretAccessKey']
                  
                  with open(config_path, 'w') as f:
                      json.dump(config, f, indent=4)
                  logger.info(f"Updated JSON config for {username}")
              except Exception as e:
                  logger.error(f"Error updating JSON config for {username}: {str(e)}")
          
          def update_env_file(username, credentials):
              """Update credentials in .env file"""
              env_path = Path(f'/tmp/test-apps/app2/.env')
              env_path.parent.mkdir(parents=True, exist_ok=True)
              
              try:
                  if env_path.exists():
                      with open(env_path, 'r') as f:
                          lines = f.readlines()
                  else:
                      lines = [
                          "AWS_ACCESS_KEY_ID=\n",
                          "AWS_SECRET_ACCESS_KEY=\n",
                          "AWS_REGION=us-east-1\n"
                      ]
                  
                  new_lines = []
                  for line in lines:
                      if line.startswith('AWS_ACCESS_KEY_ID='):
                          new_lines.append(f'AWS_ACCESS_KEY_ID={credentials["AccessKeyId"]}\n')
                      elif line.startswith('AWS_SECRET_ACCESS_KEY='):
                          new_lines.append(f'AWS_SECRET_ACCESS_KEY={credentials["SecretAccessKey"]}\n')
                      else:
                          new_lines.append(line)
                  
                  with open(env_path, 'w') as f:
                      f.writelines(new_lines)
                  logger.info(f"Updated .env file for {username}")
              except Exception as e:
                  logger.error(f"Error updating .env file for {username}: {str(e)}")
          
          def update_ini_config(username, credentials):
              """Update credentials in INI config file"""
              config_path = Path(f'/tmp/test-apps/app3/credentials.ini')
              config_path.parent.mkdir(parents=True, exist_ok=True)
              
              try:
                  config = configparser.ConfigParser()
                  if config_path.exists():
                      config.read(config_path)
                  else:
                      config['default'] = {
                          'aws_access_key_id': '',
                          'aws_secret_access_key': '',
                          'region': 'us-east-1'
                      }
                  
                  config['default']['aws_access_key_id'] = credentials['AccessKeyId']
                  config['default']['aws_secret_access_key'] = credentials['SecretAccessKey']
                  
                  with open(config_path, 'w') as f:
                      config.write(f)
                  logger.info(f"Updated INI config for {username}")
              except Exception as e:
                  logger.error(f"Error updating INI config for {username}: {str(e)}")
          
          def lambda_handler(event, context):
              """Main function to update credentials for all test users"""
              logger.info("Starting credential update process")
              
              try:
                  # Get all IAM users
                  iam = boto3.client('iam')
                  users = iam.list_users()['Users']
                  
                  for user in users:
                      username = user['UserName']
                      if username.startswith('test-user-'):
                          logger.info(f"\nProcessing user: {username}")
                          credentials = get_new_credentials(username)
                          if credentials:
                              update_json_config(username, credentials)
                              update_env_file(username, credentials)
                              update_ini_config(username, credentials)
                              logger.info(f"Successfully updated all configurations for {username}")
                          else:
                              logger.warning(f"Skipping {username} - no credentials found")
                  
                  logger.info("Credential update process completed")
              except Exception as e:
                  logger.error(f"Error in main process: {str(e)}")
                  raise
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          LOG_LEVEL: INFO

  UpdateCredentialsSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Schedule for updating application credentials'
      ScheduleExpression: 'rate(15 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt UpdateCredentialsLambda.Arn
          Id: 'UpdateCredentialsLambda'

  UpdateCredentialsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref UpdateCredentialsLambda
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt UpdateCredentialsSchedule.Arn 